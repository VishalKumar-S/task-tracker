name: Scala CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # Job 1: Build and test tasks-service
  tasks-service:
    name: Tasks Service CI
    runs-on: ubuntu-latest

    steps:
      # Step 1: Download  code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Install Java (needed for Scala)
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'  # Eclipse Temurin (formerly AdoptOpenJDK)
          java-version: '17'
          cache: 'sbt'  # Cache sbt dependencies to speed up builds

      # Step 3: Check code formatting (ensures consistent code style)
      - name: Check code formatting
        working-directory: ./tasks-service
        run: sbt scalafmtCheckAll scalafmtSbtCheck

      # Step 4: Compile the code (catch compilation errors)
      - name: Compile code
        working-directory: ./tasks-service
        run: sbt compile Test/compile

      # Step 5: Run all tests with coverage
      - name: Run tests with coverage
        working-directory: ./tasks-service
        run: sbt coverage test coverageReport

      # Step 6: Upload coverage report (optional but recommended)
      - name: Upload coverage report
        uses: codecov/codecov-action@v4
        with:
          files: ./tasks-service/target/scala-2.13/scoverage-report/scoverage.xml
          flags: tasks-service
          fail_ci_if_error: false  # Don't fail if codecov upload fails

      # Step 7: Run scapegoat for static analysis
      - name: Run static analysis
        working-directory: ./tasks-service
        run: sbt scapegoat
        continue-on-error: true  # Don't fail build, just warn


      # Step 8: Upload the static analysis report as an artifact
      - name: Archive static analysis report
        uses: actions/upload-artifact@v4
        with:
          name: tasks-service-scapegoat-report
          path: ./tasks-service/target/scala-2.13/scapegoat-report/

  # Job 2: Build and test notification-service
  notification-service:
    name: Notification Service CI
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'sbt'

      - name: Check code formatting
        working-directory: ./notification-service
        run: sbt scalafmtCheckAll scalafmtSbtCheck

      - name: Compile code
        working-directory: ./notification-service
        run: sbt compile Test/compile

      - name: Run tests with coverage
        working-directory: ./notification-service
        run: sbt coverage test coverageReport

      - name: Upload coverage report
        uses: codecov/codecov-action@v4
        with:
          files: ./notification-service/target/scala-2.13/scoverage-report/scoverage.xml
          flags: notification-service
          fail_ci_if_error: false

      - name: Run static analysis
        working-directory: ./notification-service
        run: sbt scapegoat
        continue-on-error: true

      - name: Archive static analysis report
        uses: actions/upload-artifact@v4
        with:
          name: tasks-service-scapegoat-report
          path: ./tasks-service/target/scala-2.13/scapegoat-report/


#  # Job 3: Validate Docker setup
#  docker-validation:
#    name: Docker Validation
#    runs-on: ubuntu-latest
#    needs: [tasks-service, notification-service]  # Run only after tests pass
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Setup JDK 17
#        uses: actions/setup-java@v4
#        with:
#          distribution: 'temurin'
#          java-version: '17'
#          cache: 'sbt'
#
#      # Validate docker-compose configuration
#      - name: Validate docker-compose
#        run: docker-compose config
#
#      # Build Docker images via sbt-native-packager
#      - name: Build Docker images
#        run: |
#          cd tasks-service && sbt Docker/publishLocal
#          cd ../notification-service && sbt Docker/publishLocal